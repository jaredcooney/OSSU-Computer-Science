"""
Solitaire Mancala - Tchoukaillon

Goal: Move as many seeds as possible
from given houses into the store

In GUI, click on a tile to attempt a legal move, or
click "Make move" to automatically play the optimal
move. Game will always present a solvable initial board.

Student: Jared Cooney
jaredcooney2@gmail.com

Runs in CodeSkulptor (Python 2)
codeskulptor.org
"""

class SolitaireMancala:
    """
    Simple class that implements Solitaire Mancala
    """
    
    def __init__(self):
        """
        Create Mancala game with empty store and no houses
        """
        self._board = [0]
    
    def set_board(self, config):
        """
        Take the list configuration of initial number of seeds for given houses
        house zero corresponds to the store and is on right
        houses are number in ascending order from right to left
        """
        self._board = list(config)
    
    def __str__(self):
        """
        Return string representation for Mancala board
        """
        representation = list(self._board)
        representation.reverse()
        return str(representation)
    
    def get_num_seeds(self, house_num):
        """
        Return the number of seeds in given house on board
        """
        return self._board[house_num]

    def is_game_won(self):
        """
        Check to see if all houses but house zero are empty
        """
        for idx in self._board[1:]:
            if idx:
                return False
        return True
    
    def is_legal_move(self, house_num):
        """
        Check whether a given move is legal
        """
        return (0 < house_num < len(self._board)) and (house_num == self._board[house_num])

    
    def apply_move(self, house_num):
        """
        Move all of the stones from house to lower/left houses
        Last seed must be played in the store (house zero)
        """
        if self.is_legal_move(house_num):
            for idx in range(house_num):
                self._board[idx] += 1
            self._board[house_num] = 0

    def choose_move(self):
        """
        Return the house for the next shortest legal move
        Shortest means legal move from house closest to store
        Note that using a longer legal move would make smaller illegal
        If no legal move, return house zero
        """
        for house_num in range(1, len(self._board)):
            if self.is_legal_move(house_num):
                return house_num
        return 0
    
    def plan_moves(self):
        """
        Return a sequence (list) of legal moves based on the following heuristic: 
        After each move, move the seeds in the house closest to the store 
        when given a choice of legal moves
        Not used in GUI version, only for machine testing
        """
        temp_board = SolitaireMancala()
        temp_board.set_board(list(self._board))
        plan = []
        current_move = temp_board.choose_move()
        while current_move:
            plan.append(current_move)
            temp_board.apply_move(current_move)
            current_move = temp_board.choose_move()
        return plan
    

# Import GUI
import poc_mancala_gui
poc_mancala_gui.run_gui(SolitaireMancala())


#TESTING BELOW ##################################################################
#def test_mancala():
#    """
#    Test code for Solitaire Mancala
#    """
#    
#    my_game = SolitaireMancala()
#    print "Testing init - Computed:", my_game, "Expected: [0]"
#    
#    config1 = [0, 0, 1, 1, 3, 5, 0]    
#    my_game.set_board(config1)   
#    
##    print "Testing set_board - Computed:", str(my_game), "Expected:", str([0, 5, 3, 1, 1, 0, 0])
##    print "Testing get_num_seeds - Computed:", my_game.get_num_seeds(1), "Expected:", config1[1]
##    print "Testing get_num_seeds - Computed:", my_game.get_num_seeds(3), "Expected:", config1[3]
##    print "Testing get_num_seeds - Computed:", my_game.get_num_seeds(5), "Expected:", config1[5]
##    print
##    print "\nTesting is_game_won. Expecting 'False':"
##    print my_game.is_game_won()
##    print "\nTesting is_legal_move. Expecting 'False, True':"
##    print my_game.is_legal_move(3), ",", my_game.is_legal_move(5)
##    print "\nTesting choose_move. Expecting '5':"
##    print my_game.choose_move()
##    print "\nTesting plan_moves. Expecting '[5, 1, 2, 1, 4, 1, 3, 1, 2, 1]':"
##    print my_game.plan_moves()
#    
#test_mancala()

