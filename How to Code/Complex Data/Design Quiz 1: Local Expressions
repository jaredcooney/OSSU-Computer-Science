;; Design Quiz 1: Local Expressions
;; How to Code: Complex Data (University of British Columbia)

;; Student: Jared Cooney
;; jaredcooney2@gmail.com

;; Runs in DrRacket (Intermediate Student Language)

;;===========================================================

;; Problem 1:
;;
;; Suppose you have rosters for players on two opposing tennis team, and each
;; roster is ordered by team rank, with the best player listed first. When both 
;; teams play, the best players of each team play one another,
;; the second-best players play one another, and so on down the line. When
;; one team has more players than the other, the lowest ranking players on
;; the larger team do not play.
;;
;; Design a function that consumes two rosters, and produces true if all players 
;; on both teams will play if the teams play each other. 
;; No marks will be given to solution that do not use a cross product table. 

;;======================================
;; Data definitions:

;; Player is String
;; interp.  the name of a tennis player
(define P0 "Maria")
(define P2 "Serena")

#;
(define (fn-for-player p)
  (... p))



;; Roster is one of:
;; - empty
;; - (cons Player Roster)
;; interp.  a team roster, ordered from best player to worst.
(define R0 empty)
(define R1 (list "Eugenie" "Gabriela" "Sharon" "Aleksandra"))
(define R2 (list "Maria" "Nadia" "Elena" "Anastasia" "Svetlana"))

#;
(define (fn-for-roster r)
  (cond [(empty? r) (...)]
        [else 
         (... (fn-for-player (first r))
              (fn-for-roster (rest r)))]))



(define-struct match (p1 p2))
;; Match is (make-match Player Player)
;; interp.  a match between player p1 and player p2, with same team rank
(define M0 (make-match "Eugenie" "Maria"))
(define M1 (make-match "Gabriela" "Nadia"))

#;
(define (fn-for-match m)
  (... (match-p1 m) (match-p2 m)))



;; ListOfMatch is one of:
;; - empty
;; - (cons Match ListOfMatch)
;; interp. a list of matches between one team and another.
(define LOM0 empty)
(define LOM1 (list (make-match "Eugenie" "Maria")
                   (make-match "Gabriela" "Nadia")))

#;
(define (fn-for-lom lom)
  (cond [(empty? lom) (...)]
        [else
         (... (fn-for-match (first lom))
              (fn-for-lom (rest lom)))]))


;;======================================
;; Functions:


;;  team-sizes-equal?
;; +-----------------+-----------------+------------------------------------------------+
;; |                 |                 |                                                |
;; |       roster1--->      empty      |          (cons Player ListOfPlayer)            |
;; |roster2          |                 |                                                |
;; | |               |                 |                                                |
;; +-v---------------------------------+------------------------------------------------+
;; |                 |                 |                                                |
;; |                 |                 |                                                |
;; |      empty      |      true       |                    false                       |
;; |                 |                 |                                                |
;; |                 |                 |                                                |
;; +-----------------------------------+------------------------------------------------+
;; |                 |                 |                                                |
;; |                 |                 |                                                |
;; |   (cons Player  |      false      |    (team-sizes-equal? (rest roster1)           |
;; |   ListOfPlayer) |                 |                       (rest roster2))          |
;; |                 |                 |                                                |
;; +-----------------+-----------------+------------------------------------------------+

;; Roster Roster -> Boolean
;; produce true if the two given rosters contain the same number of Players
(check-expect (team-sizes-equal? empty empty) true)
(check-expect (team-sizes-equal? R1 empty) false)
(check-expect (team-sizes-equal? empty R1) false)
(check-expect (team-sizes-equal? R1 R2) false)
(check-expect (team-sizes-equal? R2 R1) false)
(check-expect (team-sizes-equal? (cons "Serena" R1) R2) true)

;(define (team-sizes-equal? roster1 roster2) false)  ;stub

(define (team-sizes-equal? roster1 roster2)
  (cond [(and (empty? roster1) (empty? roster2))
         true]
        [(or (empty? roster1) (empty? roster2))
         false]
        [else
         (team-sizes-equal? (rest roster1)
                            (rest roster2))]))


;;===========================================================

;; Problem 2:
;;
;; Now write a function that, given two teams, produces the list of tennis matches
;; that will be played. 
;;
;; Assume that this function will only be called if the function you designed above
;; produces true. In other words, you can assume the two teams have the same number
;; of players. 


;; list-matches
;; +-----------------+-----------------+------------------------------------------------+
;; |                 |                 |                                                |
;; |       roster1--->      empty      |          (cons Player ListOfPlayer)            |
;; |roster2          |                 |                                                |
;; | |               |                 |                                                |
;; +-v---------------------------------+------------------------------------------------+
;; |                 |                 |                                                |
;; |                 |                 |                                                |
;; |      empty      |      true       |                 (not applicable)               |
;; |                 |                 |                                                |
;; |                 |                 |                                                |
;; +-----------------------------------+------------------------------------------------+
;; |                 |                 |                                                |
;; |                 |                 |     (cons (make-match (first roster1)          |
;; |   (cons Player  | (not applicable)|                       (first roster2))         |
;; |   ListOfPlayer) |                 |           (list-matches (rest roster1)         |
;; |                 |                 |                         (rest roster2)))       |
;; +-----------------+-----------------+------------------------------------------------+


;; Roster Roster -> ListOfMatch
;; produces the list of matches that will be played between the two tennis teams
;; ASSUMES: the given teams have the same number of players
(check-expect (list-matches empty empty) empty)
(check-expect (list-matches (list P0) (list P2)) (list (make-match "Maria" "Serena")))
(check-expect (list-matches (list "Sharon" "Aleksandra") (list "Elena" "Svetlana"))
              (list (make-match "Sharon" "Elena") (make-match "Aleksandra" "Svetlana")))

;(define (list-matches roster1 roster2) empty)  ;stub

(define (list-matches roster1 roster2)
  (cond [(and (empty? roster1) (empty? roster2)) empty]
        [else
         (cons (make-match (first roster1) (first roster2))
               (list-matches (rest roster1) (rest roster2)))]))
